/*
===============================================================================
Quality Checks
===============================================================================
Purpose:
  This script performs various quality checks on data consistency, accuracy and 
  standardizaton across the 'Silver' schema, such as:
    >> Unwanted spaces in string fields.
    >> NULL or Duplicate primary keys.
    >> Invalid Date ranges and Orders.
    >> Data Standardization and Consistency.
    >> Data Consistency between related fields.

Usage:
  Run these checks after loading data in the Silver layer.
  Investigate and resolve any discrepancies found during the checks
===============================================================================
*/ 

-- =============================
-- Checking: silver.crm.cst_info
-- =============================

-- Check for NULLS and Duplicates in the primary key
-- Expectation: No Result

SELECT
	cst_id,
	COUNT(*)
FROM bronze.crm_cust_info
GROUP BY cst_id
HAVING COUNT(*) > 1 OR cst_id IS NULL;

-- Check for Unwanted spaces
-- Expectation: No Results

SELECT cst_lastname
FROM bronze.crm_cust_info
WHERE cst_lastname <> TRIM(cst_lastname);

-- Data Standardization & Consistency 
-- No abbreviations
-- Null & Empty strings replaced with default 'n/a'

SELECT DISTINCT cst_gndr,
	CASE
		WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female'
		WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
		ELSE 'n/a'
	END cst_gndr
FROM bronze.crm_cust_info;

SELECT DISTINCT cst_material_status,
	CASE
		WHEN UPPER(TRIM(cst_material_status)) = 'S' THEN 'Single'
		WHEN UPPER(TRIM(cst_material_status)) = 'M' THEN 'Married'
		ELSE 'n/a'
	END cst_material_status
FROM bronze.crm_cust_info


-- =============================
-- Checking: silver.crm_prd_info
-- =============================

-- Check for NULLS and Duplicates in the primary key
-- Expectation: No Result

SELECT
	prd_id,
	COUNT(*)
FROM bronze.crm_prd_info
GROUP BY prd_id
HAVING COUNT(*) > 1 OR prd_id IS NULL;

-- Check for Unwanted spaces
-- Expectation: No Results

SELECT prd_nm
FROM bronze.crm_prd_info
WHERE prd_nm <> TRIM(prd_nm);

-- Check for NULLS or Negative numbers
-- Expectation: No Results

SELECT prd_cost
FROM bronze.crm_prd_info
WHERE prd_cost < 0
	OR prd_cost IS NULL;

-- Data Standardization & Consistency 
-- No abbreviations
-- Null & Empty strings replaced with default 'n/a'

SELECT DISTINCT prd_line,
CASE UPPER(TRIM(prd_line))
	WHEN 'M' THEN 'Mountain'
	WHEN 'R' THEN 'Road'
	WHEN 'S' THEN 'Other Sales'
	WHEN 'T' THEN 'Touring'
	ELSE 'n/a'
END AS prd_line
FROM bronze.crm_prd_info;

-- Check for invalid Date Orders

SELECT *
FROM bronze.crm_prd_info
WHERE prd_end_dt < prd_start_dt

-- ==================================
-- Checking: silver.crm_sales_details
-- ==================================

-- Check for invalid dates

SELECT 
	NULLIF(sls_order_dt, 0) AS sls_order_dt
FROM bronze.crm_sales_details
WHERE sls_order_dt <= 0
	OR LEN(sls_order_dt) <> 8
	OR sls_order_dt > 20500101
	OR sls_order_dt < 19000101

-- Check if the order date is higher than shipping and due date

SELECT *
FROM bronze.crm_sales_details
WHERE sls_order_dt > sls_ship_dt
	or sls_order_dt > sls_due_dt

-- Check sales, quantity and price:

SELECT DISTINCT
	sls_sales,
	sls_quantity,
	sls_price
FROM bronze.crm_sales_details
WHERE sls_sales <> sls_quantity * sls_price
	OR sls_sales <= 0 OR sls_quantity <=0 OR sls_price <= 0
	OR sls_sales IS NULL OR sls_quantity IS NULL OR sls_price IS NULL
ORDER BY sls_sales, sls_quantity, sls_price


-- ==============================
-- Checking: silver.erp_cust_az12
-- ==============================

-- check for invalid date

SELECT
	bdate
FROM bronze.erp_cust_az12
WHERE bdate > getdate()
	OR bdate < '1950-01-01'
ORDER BY bdate

-- Data Standardization & Consistency
-- check gender info

SELECT DISTINCT gen,
	CASE
		WHEN gen = 'F' THEN 'Female'
		WHEN gen = 'M' THEN 'Male'
		WHEN gen is null THEN 'n/a'
		WHEN gen = '' THEN 'n/a'
		ELSE gen
	END AS gen_test
FROM bronze.erp_cust_az12


-- =============================
-- Checking: silver.erp_loc_a101
-- =============================

-- Data Standardization & Consistency

select distinct cntry,
	CASE
		WHEN TRIM(cntry) in ('USA', 'US') THEN 'United States'
		WHEN TRIM(cntry) = 'DE' THEN 'Germany'
		WHEN TRIM(cntry) is null OR TRIM(cntry) = '' THEN 'n/a'
		ELSE TRIM(cntry)
	END AS cntry_test
from bronze.erp_loc_a101
order by cntry


-- =============================
-- Checking: silver.erp_loc_a101
-- =============================

-- checking for unwanted spaces
SELECT *
FROM bronze.erp_px_cat_g1v2
WHERE cat <> TRIM(cat) OR subcat <> TRIM(subcat) OR maintenance <> TRIM(maintenance)

-- data standardization and consistency
SELECT DISTINCT maintenance
FROM bronze.erp_px_cat_g1v2
ORDER BY maintenance
